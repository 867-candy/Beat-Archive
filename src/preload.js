const { contextBridge, ipcRenderer } = require('electron');

contextBridge.exposeInMainWorld('api', {
  getConfig: () => ipcRenderer.invoke('get-config'),
  setConfig: (newPaths) => ipcRenderer.invoke('set-config', newPaths),
  updateConfig: (newConfig) => ipcRenderer.invoke('update-config', newConfig),
  selectDbPath: () => ipcRenderer.invoke('select-db-path'),
  selectFolderPath: () => ipcRenderer.invoke('select-folder-path'),
  joinPath: (...paths) => ipcRenderer.invoke('join-path', ...paths),
  fileExists: (filePath) => ipcRenderer.invoke('file-exists', filePath),
  showConfirmDialog: (message, title) => ipcRenderer.invoke('show-confirm-dialog', message, title),
  getUpdatedSongs: (date) => ipcRenderer.invoke('get-updated-songs', date),
  getClearTypeName: (clearType) => ipcRenderer.invoke('get-clear-type-name', clearType),
  getSongScore: (sha256) => ipcRenderer.invoke('get-song-score', sha256),
  loadDifficultyTable: (tableUrl) => ipcRenderer.invoke('load-difficulty-table', tableUrl),
  selectDirectory: () => ipcRenderer.invoke('select-directory'),
  takeScreenshot: (directory, filename, bounds) => ipcRenderer.invoke('take-screenshot', directory, filename, bounds),
  splitImage: (imagePath, maxHeight, datePrefix) => ipcRenderer.invoke('split-image', imagePath, maxHeight, datePrefix),
  takeScrollingScreenshot: (directory, datePrefix, maxSegmentHeight) => ipcRenderer.invoke('take-scrolling-screenshot', directory, datePrefix, maxSegmentHeight),
  openExternal: (url) => ipcRenderer.invoke('open-external', url),
  convertMd5ToSha256: (md5) => ipcRenderer.invoke('convert-md5-to-sha256', md5),
  copyToClipboard: (text) => ipcRenderer.invoke('copy-to-clipboard', text),
  copyImageToClipboard: (imagePath) => ipcRenderer.invoke('copy-image-to-clipboard', imagePath),
  openTwitterPost: (text) => ipcRenderer.invoke('open-twitter-post', text),
  getLastScreenshotPath: () => ipcRenderer.invoke('get-last-screenshot-path'),
  updateLastScreenshotPath: (imagePath, directory) => ipcRenderer.invoke('update-last-screenshot-path', imagePath, directory),
  openDirectory: (directoryPath) => ipcRenderer.invoke('open-directory', directoryPath),
  smartViewWindow: () => ipcRenderer.invoke('smart-view-window'),
  saveSmartViewStats: (stats) => ipcRenderer.invoke('save-smart-view-stats', stats),
  loadSmartViewStats: () => ipcRenderer.invoke('load-smart-view-stats'),
  takeSmartViewScreenshots: () => ipcRenderer.invoke('take-smartview-screenshots'),
  openExternalUrl: (url) => ipcRenderer.invoke('open-external-url', url),
  sendToDiscord: (webhookUrl, message, screenshotDir) => ipcRenderer.invoke('send-to-discord', webhookUrl, message, screenshotDir),
  selectAndReadConfigSys: () => ipcRenderer.invoke('select-and-read-config-sys')
});
